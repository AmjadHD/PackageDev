{ "name": "Regular Expression (Escaped)",
  "scopeName": "source.escapedregexp",
  "patterns": [
    { "include": "#classes" },
    { "include": "#allEscapes" },
    { "include": "#quantifiers" },
    { "include": "#moreQuantifiers" },
    { "include": "#operators" },
    { "include": "#characterClassGroup" },
    { "include": "#groups" }
  ],
  "repository": {
    "allEscapes": {
      "comment": "Order matters.",
      "patterns" : [
        { "include": "#regexpEscapeSequences" },
        { "include": "#regexpEscapedBackslash" },
        { "include": "#jsonEscapeSequences" }
      ]
    },
    "regexpEscapeSequences": {
      "match": "(?<!\\\\\\\\)\\\\\\\\(?:[+?*.(){}]|\\[|\\])",
      "name": "constant.character.escape.sequence.regexp.escapedregexp",
      "comment": "Escape next char if the slash isn't being escaped itself."
    },
    "regexpEscapedBackslash": {
      "match": "\\\\\\\\",
      "name": "constant.character.escape.sequence.regexp.escapedregexp"
    },
    "jsonEscapeSequences": {
      "match": "\\\\[bfntr\"\/]",
      "name": "entity.other.attribute-name.escape.sequence.json.escapedregexp"
    },
    "quantifiers": {
      "match": "(\\+|\\*|\\?)(\\?)?",
      "name": "keyword.other.quantifier.escapedregexp"
    },
    "moreQuantifiers": {
      "match": "(\\{)([0-9]+)(,)?([0-9]+)?(\\})",
      "name": "meta.granular.quantifier.escapedregexp",
      "captures": {
          "1": { "name": "entity.other.attribute-name.punctuation.quantifier.start.escapedregexp" },
          "2": { "name": "constant.numeric.escapedregexp" },
          "3": { "name": "keyword.other.separator.escapedregexp" },
          "4": { "name": "constant.numeric.escapedregexp" },
          "5": { "name": "entity.other.attribute-name.punctuation.quantifier.start.escapedregexp" }
      }
    },
    "classes": {
      "match": "\\\\\\\\[dswDSW]",
      "name": "keyword.other.character-class.escapedregexp"
    },
    "operators": {
      "match": "[|.]",
      "name": "keyword.other.operator.escapedregexp"
    },
    "characterClassGroup": {
      "begin": "\\[",
      "beginCaptures": {
          "0": { "name": "keyword.other.range.escapedregexp" }
      },
      "endCaptures": {
          "0": { "name": "keyword.other.range.escapedregexp" }
      },
      "end": "]",
      "patterns": [
        {  "name": "support.function.character-class.range.escapedregexp",
           "match": "[A-Za-z0-9]-[A-Za-z0-9]"
        },
        { "include": "#regexpEscapeSequences" },
        { "include": "#jsonEscapeSequences" },
        {  "name": "string.character-class.element.escapedregexp",
           "match": ".*?"
        }
      ]
    },
    "groups": {
      "begin": "\\(",
      "beginCaptures": {
          "0": { "name": "string.regexp.group.escapedregexp" }
      },
      "endCaptures": {
          "0": { "name": "string.regexp.group.escapedregexp" }
      },
      "end": "\\)",
      "patterns": [
        {  "name": "support.function.assertion.escapedregexp",
           "match": "(\\?(?::|=|!|<=|<!))"
        },
        { "include": "$self" }
      ]
    }
  },
  "uuid": "26c6799e-6824-4926-b2e5-87140300b97b"
}