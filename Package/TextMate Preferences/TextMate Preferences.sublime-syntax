%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - tmPreferences
name: TextMate Preferences (PList/XML)
scope: text.xml.plist.textmateprefs

contexts:

  main:
    - include: scope:text.xml.plist#xml-declarations
    - match: '(<)(plist)\s*(?:(version)\s*(=)\s*(")(1.0)("))\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.tag.localname.xml
        3: entity.other.attribute-name.localname.xml
        4: punctuation.separator.key-value.xml
        5: string.quoted.double.xml punctuation.definition.string.begin.xml
        6: string.quoted.double.xml
        7: string.quoted.double.xml punctuation.definition.string.end.xml
        8: punctuation.definition.tag.end
      push:
        - meta_content_scope: meta.inside-plist.plist
        - match: '(</)(plist)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          set: scope:text.xml.plist#whitespace-or-tag
        - match: '(?=\S)(?!<!--)'
          push:
            - include: any-known-element
        - include: scope:text.xml
    - include: scope:text.xml.plist#whitespace-or-tag

  any-known-element:
    - include: scope:text.xml.plist#number
    - include: scope:text.xml.plist#boolean
    - include: scope:text.xml.plist#string
    - include: scope:text.xml.plist#empty-array
    # NOTE: we deliberately don't include "date", or "data" here as ST doesn't support them
    - match: '(<)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: dict-key
    - match: '(<)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: end-of-array
    - include: scope:text.xml.plist#whitespace-or-tag

  dict-key:
    - meta_content_scope: meta.inside-dict.plist
    - match: '(</)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true

    - match: '((<)(key)\s*(>))(\s*scope\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-scope-string

    - match: '((<)(key)\s*(>))(\s*(?:decreaseIndentPattern|batchDecreaseIndentPattern|increaseIndentPattern|batchIncreaseIndentPattern|disableIndentNextLinePattern|bracketIndentNextLinePattern|unIndentedLinePattern|cancelCompletion)\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist meta.toc-list.regex.textmateprefs
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-regex-string

    - match: '((<)(key)\s*(>))(\s*(?:symbolTransformation|symbolIndexTransformation)\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist meta.toc-list.regex-transform.textmateprefs
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-transformation-string

    - match: '((<)(key)\s*(>))(\s*(?:shellVariables)\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist meta.toc-list.shellVariables.textmateprefs
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: shell-variables

    - match: '((<)(key)\s*(>))(\s*(?:showInSymbolList|showInIndexedSymbolList)\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist meta.toc-list.setting.textmateprefs
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-integer # yes, integer - for some reason, booleans don't work here

    - match: '((<)(key)\s*(>))(\s*(?:indentParens|indentSquareBrackets|preserveIndent)\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist meta.toc-list.setting.textmateprefs
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-boolean

    - match: '((<)(key)\s*(>))(\s*icon\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist meta.toc-list.setting.textmateprefs
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-string

    - match: '(<)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      push: [any-known-element, inside-dict-key]
    - include: scope:text.xml.plist#whitespace-or-tag

  inside-dict-key:
    - meta_content_scope: meta.inside-dict-key.plist meta.dict-key-unknown.textmateprefs
    #- include: scope:text.xml.plist#pop-tag-no-children
    - match: '(<)(/)(\2)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: meta.close-unknown-dict-key-tag.textmateprefs punctuation.definition.tag.begin.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
      pop: true
    - match: '<(?!!)'
      scope: punctuation.definition.tag.begin.xml
      push: scope:text.xml.plist#unknown-tag
    - include: scope:text.xml

  expect-scope-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-string.plist meta.toc-list.scope.textmateprefs
        - match: '<!\[CDATA\['
          scope: string.unquoted.cdata.xml punctuation.definition.string.begin.xml
          push:
            - match: ']]>'
              scope: string.unquoted.cdata.xml punctuation.definition.string.end.xml
              pop: true
            - include: scope:text.scope-selector
        - match: '(</)(string)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          pop: true
        - match: '(?=\S)'
          push:
            - include: scope:text.scope-selector
          with_prototype:
            - match: '(?=</string\s*>|<!\[CDATA\[)'
              pop: true
            - match: '\s*((&)amp(;))\s*'
              captures:
                1: constant.character.entity.xml keyword.operator.with.scope-selector
                2: punctuation.definition.constant.xml
                3: punctuation.definition.constant.xml
            - include: scope:text.xml#entity
            - match: '\s*(&)\s*'
              captures:
                1: invalid.illegal.bad-ampersand.xml
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-regex-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-string.plist
        - match: '(</)(string)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          pop: true
        - match: '(?=<!\[CDATA\[)'
          push:
            - match: ']]>'
              scope: string.unquoted.cdata.xml punctuation.definition.string.end.xml
              pop: true
            - match: '<!\[CDATA\['
              scope: string.unquoted.cdata.xml punctuation.definition.string.begin.xml
              push: regex-pattern
              with_prototype:
                - match: '(?=]]>)'
                  pop: true
        - match: '(?=\S)'
          push: regex-pattern
          with_prototype:
            - include: until-end-of-string
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-transformation-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-string.plist
        - match: '(</)(string)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          pop: true
        - match: '(?=<!\[CDATA\[)'
          push:
            - match: ']]>'
              scope: string.unquoted.cdata.xml punctuation.definition.string.end.xml
              pop: true
            - match: '<!\[CDATA\['
              scope: string.unquoted.cdata.xml punctuation.definition.string.begin.xml
              push: transformation
              with_prototype:
                - match: '(?=]]>)'
                  pop: true
        - match: '(?=\S)'
          push: transformation
          with_prototype:
            - include: until-end-of-string
    - include: scope:text.xml.plist#whitespace-or-tag

  transformation:
    - meta_content_scope: meta.regex.transformation.textmateprefs
    - match: 's/'
      scope: punctuation.definition.substitute-what.textmateprefs
      push:
        - match: '/'
          scope: punctuation.definition.substitute-with.textmateprefs
          set:
            - match: '(/)([gimsx-]*)(;|$)'
              captures:
                1: punctuation.definition.substitute-flags.textmateprefs
                2: storage.modifier.mode.regexp.transformation.textmateprefs
                3: punctuation.definition.substitution.end.textmateprefs
              pop: true
            - include: scope:source.regexp-replacement
        - include: scope:source.regexp#base-literal
    - include: scope:source.regexp#group-comment
    - include: scope:source.regexp#extended-patterns

  regex-pattern:
    - meta_content_scope: meta.regex.textmateprefs
    - include: scope:source.regexp

  shell-variables:
    - match: '(<)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: end-of-shell-variables-array
    - include: scope:text.xml.plist#whitespace-or-tag

  end-of-shell-variables-array:
    - meta_content_scope: meta.inside-array.plist
    - match: '(</)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: ''
      push:
        - match: '(?=</array\s*>)'
          pop: true
        - include: expect-shell-variable-dict

  expect-shell-variable-dict:
    - match: '(<)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: dict-key-shell-variable

  dict-key-shell-variable:
    - meta_content_scope: meta.inside-dict.shellVariables.textmateprefs
    - match: '(</)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true

    - match: '((<)(key)\s*(>))(\s*name\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push:
        - match: '((<)(string)\s*(>))(\s*([^<]+)\s*)((</)(string)\s*(>))'
          captures:
            1: meta.tag.xml
            2: punctuation.definition.tag.begin.xml
            3: entity.name.tag.localname.xml
            4: punctuation.definition.tag.end.xml
            5: meta.inside-string.plist
            6: meta.toc-list.shellVariable.name.textmateprefs
            7: meta.tag.xml
            8: punctuation.definition.tag.begin.xml
            9: entity.name.tag.localname.xml
            10: punctuation.definition.tag.end.xml
          pop: true
        - include: scope:text.xml.plist#whitespace-or-tag
    - match: '((<)(key)\s*(>))(\s*value\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-string
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-boolean:
    - include: scope:text.xml.plist#boolean
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-integer:
    - include: scope:text.xml.plist#number
    - match: '((<)(string)\s*(>))(\s*([01])\s*)((</)(string)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: constant.numeric.textmateprefs
        7: meta.tag.xml
        8: punctuation.definition.tag.begin.xml
        9: entity.name.tag.localname.xml
        10: punctuation.definition.tag.end.xml
      pop: true
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-string:
    - include: scope:text.xml.plist#string
    - include: scope:text.xml.plist#whitespace-or-tag

  until-end-of-string:
    - match: '(?=</string\s*>|<!\[CDATA\[)'
      pop: true
    - include: scope:text.xml#entity
    - include: scope:text.xml#should-be-entity
    - match: '(\\)([<>])'
      captures:
        1: constant.character.escape.regexp
        2: constant.character.escape.regexp invalid.illegal.missing-entity.xml
    - match: '\(\?([<>])'
      captures:
        1: invalid.illegal.missing-entity.xml

  end-of-array:
    - meta_content_scope: meta.inside-array.plist
    - match: '(</)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: ''
      push:
        - match: '(?=</array\s*>)'
          pop: true
        - include: any-known-element
